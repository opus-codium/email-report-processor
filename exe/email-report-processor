#!/usr/bin/env ruby
# frozen_string_literal: true

require 'email_report_processor'

require 'opensearch'

require 'optparse'

options = {
  class:   nil,
  mbox:    false,
  maildir: false,
  os:      {
    hostname: 'localhost',
    port:     9200,
    username: 'admin',
    password: 'admin',
  },
}

OptionParser.new do |opts| # rubocop:disable Metrics/BlockLength
  opts.banner = "usage: #{$PROGRAM_NAME} [options] [file...]"
  opts.separator("\nReport type selection:")
  opts.on('--dmarc', 'Process DMARC Reports') do
    options[:class] = EmailReportProcessor::DmarcRua
  end
  opts.on('--tlsrpt', 'Process SMTP TLS Reports') do
    options[:class] = EmailReportProcessor::TlsrptRua
  end
  opts.separator("\nOpenSearch options:")
  opts.on('-h', '--os-hostname=HOSTNAME', 'Hostname of the OpenSearch instance') do |hostname|
    options[:os][:hostname] = hostname
  end
  opts.on('-p', '--os-port=PORT', 'Port of the OpenSearch instance') do |port|
    options[:os][:port] = port.to_i
  end
  opts.on('-u', '--os-username=USERNAME', 'Username of the OpenSearch instance') do |username|
    options[:os][:username] = username
  end
  opts.on('--os-password=PASSWORD', 'Password of the OpenSearch instance') do |password|
    options[:os][:password] = password
  end

  opts.separator("\nMiscellaneous options:")
  opts.on('--mbox', 'Treat the provided files as Mbox') do
    options[:mbox] = true
  end
  opts.on('--maildir', 'Treat the provided files as Maildir') do
    options[:maildir] = true
  end
end.parse!

if options[:class].nil?
  warn('A processor type must be passed')
  exit 1
end

if options[:mbox] && options[:maildir]
  warn('The --mbox and --maildir options are mutualy exclusive')
  exit 1
end

client = OpenSearch::Client.new(
  host:              "https://#{options[:os][:hostname]}:#{options[:os][:port]}",
  user:              options[:os][:username],
  password:          options[:os][:password],
  transport_options: { ssl: { verify: false } },
)

processor = options[:class].new(client: client)

if ARGV.empty?
  mail = Mail.new($stdin.read)
  processor.process_message(mail)
else
  ARGV.each do |filename|
    if options[:mbox]
      m = EmailReportProcessor::MailBox.new(filename)

      while (mail = m.next_message)
        processor.process_message(mail)
      end
    elsif options[:maildir]
      m = EmailReportProcessor::MailDir.new(filename)

      while (mail = m.next_message)
        processor.process_message(mail)
      end
    else
      mail = Mail.new(File.read(filename))
      processor.process_message(mail)
    end
  end
end
