#!/usr/bin/env ruby
# frozen_string_literal: true

require 'email_report_processor'

require 'opensearch'
require 'faraday/net_http_persistent'

require 'openssl'
require 'optparse'

options = {
  host:              URI('https://admin:admin@localhost:9200'),
  transport_options: { ssl: {} },
  mbox:              false,
  maildir:           false,
}

class Progress
  def initialize(output: $stderr)
    @output = output
    @progress = 0
  end

  def step
    @progress += 1
    if (@progress % 10).zero?
      @output.write(@progress)
    elsif @progress.even?
      @output.write('.')
    end

    @output.flush
  end

  def terminate
    @output.write("\n") if @progress >= 2
    @progress = 0
  end
end

# rubocop:disable Metrics/BlockLength
OptionParser.new do |opts|
  opts.banner = "usage: #{$PROGRAM_NAME} [options] [file...]"

  opts.separator("\nOpenSearch options:")
  opts.on('-u', '--url=URL', 'URL of the OpenSearch instance') do |url|
    options[:host] = URI(url)
  end
  opts.on('--cacert=CERTIFICATE', 'Verify certificate against the provided CERTIFICATE') do |file|
    options[:transport_options][:ssl][:ca_file] = file
  end
  opts.on('--cert=CERTIFICATE', 'Use the provided CERTIFICATE for TLS client authentication') do |file|
    options[:transport_options][:ssl][:client_cert] = OpenSSL::X509::Certificate.new(File.read(file))
  end
  opts.on('--key=KEY', 'Use the provided KEY for TLS client authentication') do |file|
    options[:transport_options][:ssl][:client_key] = OpenSSL::PKey.read(File.read(file))
  end
  opts.on('-k', '--insecure', 'Skip certificate verification against trust store') do
    options[:transport_options][:ssl][:verify] = false
  end
  opts.on('--dmarc-index=INDEX', 'OpenSearch index of DMARC reports') do |index|
    options[:dmarc_index] = index
  end
  opts.on('--dmarc-pipeline=PIPELINE', 'Ingest DMARC reports using the provided PIPELINE') do |pipeline|
    options[:dmarc_pipeline] = pipeline
  end
  opts.on('--tlsrpt-index=INDEX', 'OpenSearch index of SMTP TLS reports') do |index|
    options[:tlsrpt_index] = index
  end
  opts.on('--tlsrpt-pipeline=PIPELINE', 'Ingest SMTP TLS reports using the provided PIPELINE') do |pipeline|
    options[:tlsrpt_pipeline] = pipeline
  end

  opts.separator("\nMiscellaneous options:")
  opts.on('-b', '--mbox', 'Treat the provided files as Mbox') do
    options[:mbox] = true
  end
  opts.on('-d', '--maildir', 'Treat the provided files as Maildir') do
    options[:maildir] = true
  end
end.parse!

if options[:mbox] && options[:maildir]
  warn('The --mbox and --maildir options are mutualy exclusive')
  exit 1
end
# rubocop:enable Metrics/BlockLength

client = OpenSearch::Client.new(
  host:              options[:host],
  transport_options: options[:transport_options],
)

message_reader = EmailReportProcessor::MessageReader.new
report_processor = EmailReportProcessor::ReportProcessor.new(client: client, options: options)

if ARGV.empty?
  mail = Mail.new($stdin.read)
  report_processor.send_report(message_reader.process_message(mail))
else
  p = Progress.new
  ARGV.each do |filename|
    if options[:mbox]
      m = EmailReportProcessor::Mbox.new(filename)

      while (mail = m.next_message)
        report_processor.send_report(message_reader.process_message(mail))
        p.step
      end
    elsif options[:maildir]
      m = EmailReportProcessor::MailDir.new(filename)

      while (mail = m.next_message)
        report_processor.send_report(message_reader.process_message(mail))
        p.step
      end
    else
      mail = Mail.new(File.read(filename))
      report_processor.send_report(message_reader.process_message(mail))
      p.step
    end
  end
  p.terminate
end

unless message_reader.errors.empty?
  warn "The following #{message_reader.errors.count} message(s) count not be processed:"
  message_reader.errors.each do |error|
    warn "  - #{error.message_id} (#{error.subject}): #{error['X-Email-Report-Processor-Error']}"
  end
  exit 1
end
