#!/usr/bin/env ruby
# frozen_string_literal: true

require 'email_report_processor'

require 'opensearch/cli'
require 'faraday/net_http_persistent'

require 'datemath'
require 'openssl'
require 'optparse'

options = {
  mbox:              false,
  maildir:           false,
  deduplicate_since: 'now-7d/d',
  deduplicate_until: 'now',
  deduplicate_count: 100,
}

class Progress
  def initialize(output: $stderr)
    @output = output
    @progress = 0
  end

  def step
    @progress += 1
    if (@progress % 10).zero?
      @output.write(@progress)
    elsif @progress.even?
      @output.write('.')
    end

    @output.flush
  end

  def terminate
    @output.write("\n") if @progress >= 2
    @progress = 0
  end
end

# rubocop:disable Metrics/BlockLength
cli = OpenSearch::CLI.new do |opts|
  opts.banner = "usage: #{$PROGRAM_NAME} [options] [file...]"

  opts.separator('')
  opts.separator('Ingestion options:')
  opts.on('--dmarc-index=INDEX', 'OpenSearch index of DMARC reports') do |index|
    options[:dmarc_index] = index
  end
  opts.on('--dmarc-pipeline=PIPELINE', 'Ingest DMARC reports using the provided PIPELINE') do |pipeline|
    options[:dmarc_pipeline] = pipeline
  end
  opts.on('--tlsrpt-index=INDEX', 'OpenSearch index of SMTP TLS reports') do |index|
    options[:tlsrpt_index] = index
  end
  opts.on('--tlsrpt-pipeline=PIPELINE', 'Ingest SMTP TLS reports using the provided PIPELINE') do |pipeline|
    options[:tlsrpt_pipeline] = pipeline
  end

  opts.separator('')
  opts.separator('Deduplication options:')
  opts.on('--dedup-since=SINCE', 'Deduplicate reports since (e.g. "now-1M")') do |dedup_since|
    options[:deduplicate_since] = dedup_since
  end
  opts.on('--dedup-until=UNTIL', 'Deduplicate reports until (e.g. "now")') do |dedup_until|
    options[:deduplicate_until] = dedup_until
  end
  opts.on('--dedup-count=COUNT', 'Find up to COUNT report ids in the deduplication interval') do |count|
    options[:deduplicate_count] = count
  end

  opts.separator('')
  opts.separator('Miscellaneous options:')
  opts.on('-b', '--mbox', 'Treat the provided files as Mbox') do
    options[:mbox] = true
  end
  opts.on('-d', '--maildir', 'Treat the provided files as Maildir') do
    options[:maildir] = true
  end
end

cli.load
cli.parse!

if options[:mbox] && options[:maildir]
  warn('The --mbox and --maildir options are mutualy exclusive')
  exit 1
end
# rubocop:enable Metrics/BlockLength

message_reader = EmailReportProcessor::MessageReader.new
report_processor = EmailReportProcessor::ReportProcessor.new(client: cli.client, options: options)

accepted_dates = Datemath::Parser.new(options[:deduplicate_since]).parse..Datemath::Parser.new(options[:deduplicate_until]).parse

if ARGV.empty?
  mail = Mail.new($stdin.read)
  report_processor.send_report(message_reader.process_message(mail))
else
  p = Progress.new
  ARGV.each do |filename|
    if options[:mbox]
      m = EmailReportProcessor::Mbox.new(filename)

      while (mail = m.next_message)
        next unless accepted_dates.cover?(mail.date)

        report_processor.send_report(message_reader.process_message(mail))
        p.step
      end
    elsif options[:maildir]
      m = EmailReportProcessor::MailDir.new(filename)

      while (mail = m.next_message)
        next unless accepted_dates.cover?(mail.date)

        report_processor.send_report(message_reader.process_message(mail))
        p.step
      end
    else
      mail = Mail.new(File.read(filename))
      report_processor.send_report(message_reader.process_message(mail))
      p.step
    end
  end
  p.terminate
end

unless message_reader.errors.empty?
  warn "The following #{message_reader.errors.count} message(s) count not be processed:"
  message_reader.errors.each do |error|
    warn "  - #{error.message_id} (#{error.subject}): #{error['X-Email-Report-Processor-Error']}"
  end
  exit 1
end
