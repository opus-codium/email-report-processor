#!/usr/bin/env ruby
# frozen_string_literal: true

require 'email_report_processor'

require 'opensearch'

require 'optparse'

options = {
  class:   nil,
  mbox:    false,
  maildir: false,
  os:      {
    host:     'https://localhost:9200',
    username: 'admin',
    password: 'admin',
  },
}

OptionParser.new do |opts| # rubocop:disable Metrics/BlockLength
  opts.banner = "usage: #{$PROGRAM_NAME} [options] [file...]"
  opts.separator("\nReport type selection:")
  opts.on('-d', '--dmarc', 'Process DMARC Reports') do
    options[:class] = EmailReportProcessor::DmarcRua
  end
  opts.on('-t', '--tlsrpt', 'Process SMTP TLS Reports') do
    options[:class] = EmailReportProcessor::TlsrptRua
  end

  opts.separator("\nOpenSearch options:")
  opts.on('-h', '--os-host=HOSTNAME', 'Hostname of the OpenSearch instance') do |host|
    options[:os][:host] = host
  end
  opts.on('-u', '--os-username=USERNAME', 'Username of the OpenSearch instance') do |username|
    options[:os][:username] = username
  end
  opts.on('-p', '--os-password=PASSWORD', 'Password of the OpenSearch instance') do |password|
    options[:os][:password] = password
  end
  opts.on('--dmarc-index=INDEX', 'OpenSearch index of DMARC reports') do |index|
    options[:dmarc_index] = index
  end
  opts.on('--tlsrpt-index=INDEX', 'OpenSearch index of SMTP TLS reports') do |index|
    options[:tlsrpt_index] = index
  end

  opts.separator("\nMiscellaneous options:")
  opts.on('-b', '--mbox', 'Treat the provided files as Mbox') do
    options[:mbox] = true
  end
  opts.on('-d', '--maildir', 'Treat the provided files as Maildir') do
    options[:maildir] = true
  end
end.parse!

if options[:class].nil?
  warn('A processor type must be passed')
  exit 1
end

if options[:mbox] && options[:maildir]
  warn('The --mbox and --maildir options are mutualy exclusive')
  exit 1
end

client = OpenSearch::Client.new(
  host:              options[:os][:host],
  user:              options[:os][:username],
  password:          options[:os][:password],
  transport_options: { ssl: { verify: false } },
)

processor = options[:class].new(client: client, options: options)

if ARGV.empty?
  mail = Mail.new($stdin.read)
  processor.process_message(mail)
else
  ARGV.each do |filename|
    if options[:mbox]
      m = EmailReportProcessor::MailBox.new(filename)

      while (mail = m.next_message)
        processor.process_message(mail)
      end
    elsif options[:maildir]
      m = EmailReportProcessor::MailDir.new(filename)

      while (mail = m.next_message)
        processor.process_message(mail)
      end
    else
      mail = Mail.new(File.read(filename))
      processor.process_message(mail)
    end
  end
end
